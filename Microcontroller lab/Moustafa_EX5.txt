int pause = 0;
int buttonPresses = 0;
void enablePWM();
void enableSensor();

float melody_1[26] = {260, 262, 294, 262, 349, 330,
                        260, 262, 294, 262, 392, 349,
                        260, 262, 523, 440, 349, 349,
                        330, 294, 466, 466, 440,
                        349, 392, 349};

float melody_2[26] = {261, 294, 329, 349, 392, 440,
                      493, 523, 261, 294, 329, 349,
                      392, 440, 493, 523, 261, 294,
                      329, 349, 392, 440, 493,
                      523, 261, 294};
void playMelody_1()
{
    enablePWM();
    for (i = 0; i < 26; i++)
    {
        while (pause == 1);
        TA0CCTL2 = OUTMOD_3; // CCR2 set / reset
        TA0CCR0 = (int)((1/melody_1[i])*1000000); // PWM Period (1000 us)
        TA0CCR2 = 500; // PWM Duty Cycle (50 %)
        TA0CTL = TASSEL_2 + MC_1 ; // SMCLK, MC_1 in up mode

         __delay_cycles(100000);

        TA0CCTL2 = OUTMOD_3; // CCR2 set / reset
        TA0CCR0 = 0; // Off
        TA0CCR2 = 500; // PWM Duty Cycle (50 %)
        TA0CTL = TASSEL_2 + MC_1 ; // SMCLK, MC_1 in up mode

        __delay_cycles(100000);
    }
    buttonPresses = 0;
    __delay_cycles(1000000);
    enableSensor();
}

void playMelody_2()
{
    enablePWM();
    for (i = 0; i < 26; i++)
    {
        while (pause == 1);
        TA0CCTL2 = OUTMOD_3; // CCR2 set / reset
        TA0CCR0 = (int)((1/melody_2[i])*1000000); // PWM Period (1000 us)
        TA0CCR2 = 500; // PWM Duty Cycle (50 %)
        TA0CTL = TASSEL_2 + MC_1 ; // SMCLK, MC_1 in up mode

         __delay_cycles(100000);

        TA0CCTL2 = OUTMOD_3; // CCR2 set / reset
        TA0CCR0 = 0; // Off
        TA0CCR2 = 500; // PWM Duty Cycle (50 %)
        TA0CTL = TASSEL_2 + MC_1 ; // SMCLK, MC_1 in up mode

        __delay_cycles(100000);
    }
    buttonPresses = 0;
    __delay_cycles(1000000);
    enableSensor();
}
// Function to disable sensor, and enable PWM mode
void enablePWM()
{
    P3DIR |= BIT6;
    P3SEL |= BIT6;                             // TA1 option
    P3REN &= ~BIT6;
    P3OUT &= ~BIT6;
}
// Function to enable sensor, and disable PWM mode
void enableSensor()
{
    P3DIR &= ~BIT6;
    P3SEL &= ~BIT6;
    P3REN |= BIT6;
    P3OUT |= BIT6;
}

void main(void)
{
    initMSP();

    // Set P1.3, P1.4 as input
    P1DIR &= ~BIT3;
    P1DIR &= ~BIT4;

    // Set P3.6 (Buzzer), by default to input
    P3DIR &= ~BIT6;

    // Enable P1.3, P1.4 pull-up resistor
    P1REN |= BIT3;
    P1REN |= BIT4;

    P3REN |= BIT6;

    // Set to pull-up
    P1OUT |= BIT3;
    P1OUT |= BIT4;

    P3OUT |= BIT6;
    // Enable Interrupts
    P1IE |= BIT3;
    P1IE |= BIT4;

    // High/Low-Edge
    P1IES |= BIT3;
    P1IES |= BIT4;

    // Clear Interrupt Flags
    P1IFG &= ~BIT3;
    P1IFG &= ~BIT4;

    P3SEL &= ~BIT6;

    while (1)
    {
        // Task 1a - Play melodies by default
        /*
        playMelody_1();
        playMelody_2();
         */

        // Check knocking signal
        if ((P3IN & BIT6) == 0)
        {
            __delay_cycles(1000);
            buttonPresses++;
        }

        if (buttonPresses > 0)
        {
            for (i = 0; i < 1000; i++)
            {
                __delay_cycles(1000);
                if ((P3IN & BIT6) == 0)
                {
                    __delay_cycles(1000);
                    buttonPresses ++;
                }
            }
            if (buttonPresses % 2 == 0)
                playMelody_2();
            else
                playMelody_1();
        }

        __enable_interrupt(); // enable all interrupts
    }
}
// Port 1 interrupt service routine
#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{
// if PB5 is pressed
    if ((P1IN & BIT3) == 0)
    {
        buttonPresses ++;
    }

    // if PB6 is pressed
    if ((P1IN & BIT4) == 0)
    {
       if (pause == 0)
       {
           pause = 1;
       }
       else if (pause == 1)
       {
           pause = 0;
       }
    }
    P1IFG &= ~BIT3; // P1.3 IFG cleared
    P1IFG &= ~BIT4; // P1.4 IFG cleared
}